from datetime import datetime as dt

import discord
from discord.ext import commands


class Logs(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        logChannel = self.bot.get_channel(875727940095197204)
        last_msgs = await message.channel.history(limit = 1).flatten()
        if message.author.bot == False:
            embed = discord.Embed(  
                title = 'üöÆ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                timestamp = dt.utcnow(),
                color = discord.Colour.dark_red(),
            ).add_field(
                name = '–ê–≤—Ç–æ—Ä',
                value = message.author.mention
            ).add_field(
                name = '–ö–∞–Ω–∞–ª',
                value = message.channel.mention
            ).add_field(
                name = '–ö–æ–Ω—Ç–µ–Ω—Ç',
                value = message.content if message.content else '`–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞`',
                inline = False
            ).add_field(
                name = '–ü—Ä–µ–¥—à–µ—Å–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                value = f'[Jump!]({last_msgs[0].jump_url})' if len(last_msgs) > 0 else '–≠—Ç–æ –±—ã–ª–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ',
                inline = False
            ).set_footer(
                text = f'Author: {message.author.id} Channel: {message.channel.id}'
            )
            await logChannel.send(embed = embed)
    
    @commands.Cog.listener() 
    async def on_message_edit(self, before, after):
        logChannel = self.bot.get_channel(875727940095197204)
        if after.author.bot == False:
            if after.content != before.content:
                embed = discord.Embed(
                    title = 'üñã –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                    timestamp = dt.utcnow(),
                    color = discord.Colour.dark_gold()
                ).add_field(
                    name = '–ê–≤—Ç–æ—Ä',
                    value = before.author.mention
                ).add_field(
                    name = '–ö–∞–Ω–∞–ª',
                    value = before.channel.mention
                ).add_field(
                    name = '–û—Ä–∏–≥–∏–Ω–∞–ª',
                    value = f'[Jump!]({before.jump_url})'
                ).add_field(
                    name = '–ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º',
                    value = before.content if before.content else '`–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞`',
                    inline = False
                ).add_field(
                    name = '–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    value = after.content if after.content else '`–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞`',
                    inline = False
                ).set_footer(
                    text = f'Message: {before.id} Author: {before.author.id} Channel: {before.channel.id}'
                )
                await logChannel.send(embed = embed)
    
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        logChannel = self.bot.get_channel(912117419894505472)
        if before.channel == after.channel:
            return
        else:
            embed = discord.Embed(
                title = 'üé§ –í–æ–π—Å —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω',
                timestamp = dt.utcnow(),
                color = discord.Colour.dark_teal()
            ).add_field(
                name = '–£—á–∞—Å—Ç–Ω–∏–∫',
                value = member.mention
            ).add_field(
                name = '–ë—ã–ª–æ',
                value = before.channel.mention if before.channel else '`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–æ–π—Å—É`'
            ).add_field(
                name = '–°—Ç–∞–ª–æ',
                value = after.channel.mention if after.channel else '`–í—ã—à–µ–ª –∏–∑ –≤–æ–π—Å–∞`'
            ).set_footer(
                text = f'Member: {member.id} Before: {before.channel.id if before.channel else "None"} After: {after.channel.id if after.channel else "None"}'
            )
            await logChannel.send(embed = embed)


def setup(bot):
    bot.add_cog(Logs(bot))
